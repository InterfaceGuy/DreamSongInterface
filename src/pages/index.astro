---
import { readFileSync } from 'node:fs';
import { fileURLToPath } from 'node:url';
import path from 'node:path';
import Layout from '../layouts/Layout.astro';
import ScrollBlock from '../components/ScrollBlock.astro';
import { parseCanvas } from '../lib/canvasParser.js';

// Construct the absolute path to the canvas file
// import.meta.url gives the URL of the current module (index.astro)
// fileURLToPath converts the file URL to a file system path
// path.resolve navigates up two directories and then to DreamSong.canvas
const currentFilePath = fileURLToPath(import.meta.url);
const canvasFilePath = path.resolve(path.dirname(currentFilePath), '../../DreamSong.canvas');

let contentBlocks = [];
let canvasData;

try {
	// Read the file content
	const canvasFileContent = readFileSync(canvasFilePath, 'utf-8');
	// Parse the JSON data
	canvasData = JSON.parse(canvasFileContent);
	// Parse the canvas data using your library function
	contentBlocks = parseCanvas(canvasData);
} catch (error) {
	console.error("Error reading or parsing DreamSong.canvas:", error);
	// Handle potential errors (e.g., file not found, invalid JSON)
}


// Handle potential parsing errors from parseCanvas itself

// Handle potential parsing errors
if (!Array.isArray(contentBlocks)) {
	console.error("Failed to parse canvas data. Rendering empty page.");
	// Optionally render an error message
}

---

<Layout title="DreamSong - A Scroll-Telling Story">
	<main>
		{contentBlocks && contentBlocks.length > 0 ? (
			contentBlocks.map((block, index) => (
				<ScrollBlock block={block} index={index} />
			))
		) : (
			<p class="error-message">Could not load story content. Please check the canvas data and parsing logic.</p>
		)}
	</main>
</Layout>

<style is:global>
	main {
		max-width: 1200px; /* Adjust as needed */
		margin: 0 auto;
		padding: 0 1rem;
	}
	h1, h2, h3, h4, h5, h6 {
        /* Ensure headings also use the main font */
        font-family: 'TeX Gyre Termes', serif;
		/* Example heading color - adjust as needed */
		color: rgb(var(--accent-light));
        margin-bottom: 1em; /* Add some space below headings */
        line-height: 1.3;
	}
    p {
        line-height: 1.6; /* Improve readability */
        margin-bottom: 1em; /* Space between paragraphs */
    }
    a {
        color: rgb(var(--accent-light));
        text-decoration: underline;
    }
    a:hover {
        color: white;
    }
	.error-message {
		color: #ff6666; /* Light red for errors */
		text-align: center;
		padding: 2rem;
		font-size: 1.2em;
	}
</style>
