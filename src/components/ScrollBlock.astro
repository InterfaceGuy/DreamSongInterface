---
// Define more flexible types for potentially missing media/text
interface MediaData {
  type: 'image' | 'video';
  src: string;
  alt: string;
}

interface BlockData {
  type: string; // e.g., 'block'
  media?: MediaData;
  text?: string; // HTML string (already parsed)
}

interface Props {
  block: BlockData;
  index: number; // To determine alternating layout
}

const { block, index } = Astro.props;

// Text is now pre-parsed HTML
const parsedText = block.text; // No need to parse here

// Determine layout order: media-left/text-right for even index, text-left/media-right for odd index
const isMediaLeft = index % 2 === 0;

// Determine if the block has both media and text, or just one
const hasBoth = block.media && block.text;
const hasOnlyMedia = block.media && !block.text;
const hasOnlyText = !block.media && block.text;

// Define CSS classes based on content and layout using template literals
const blockClasses = `scroll-block ${isMediaLeft ? 'media-left' : 'media-right'} ${hasOnlyMedia ? 'only-media' : ''} ${hasOnlyText ? 'only-text' : ''}`;

---

<section class={blockClasses}>
  {block.media && (
    <div class="media-container">
      {block.media.type === 'image' ? (
        <img src={block.media.src} alt={block.media.alt} loading="lazy" />
      ) : (
        <video src={block.media.src} loading="lazy" muted autoplay loop playsinline></video>
      )}
    </div>
  )}
  {parsedText && (
    <div class="text-container">
      <Fragment set:html={parsedText} />
    </div>
  )}
</section>

<style>
  .scroll-block {
    display: flex;
    flex-direction: column; /* Default stacked layout for small screens */
    gap: 2rem;
    margin-bottom: 4rem;
    padding: 2rem 0;
    align-items: center; /* Center items when stacked */
    min-height: 30vh; /* Ensure blocks have some minimum height */
  }

  .media-container,
  .text-container {
    flex: 1; /* Allow containers to grow */
    width: 100%; /* Full width on small screens */
    max-width: 600px; /* Limit width of individual elements */
  }

  /* Ensure text container has reasonable width even when alone */
  .text-container {
     max-width: 600px; /* Consistent max-width */
  }


  .media-container img,
  .media-container video {
    display: block;
    width: 100%;
    height: auto;
    border-radius: 8px;
    background-color: #111; /* Dark background for media loading */
  }

  /* Responsive layout for larger screens */
  @media (min-width: 768px) {
    .scroll-block {
      flex-direction: row;
      align-items: center; /* Vertically center content */
      justify-content: center; /* Center block content horizontally */
      gap: 4rem; /* Increase gap on larger screens */
    }

    /* Default order (media left) */
    .media-left .media-container { order: 1; }
    .media-left .text-container { order: 2; }

    /* Reversed order (media right) */
    .media-right .media-container { order: 2; }
    .media-right .text-container { order: 1; }

    /* Adjust width for side-by-side layout */
    .media-container,
    .text-container {
       width: auto; /* Override width: 100% from mobile */
       /* Max-width is handled below */
    }

    /* Define flex ratios for paired blocks (media 2/3, text 1/3) */
    .scroll-block:not(.only-media):not(.only-text) .media-container {
        flex: 2 1 0; /* flex-grow: 2, flex-shrink: 1, flex-basis: 0 */
        max-width: 66%; /* Approximate max width */
    }
    .scroll-block:not(.only-media):not(.only-text) .text-container {
        flex: 1 1 0; /* flex-grow: 1, flex-shrink: 1, flex-basis: 0 */
        max-width: 33%; /* Approximate max width */
    }


     /* Styles for blocks with only one element on large screens */
    .scroll-block.only-media .media-container,
    .scroll-block.only-text .text-container {
        flex-basis: 100%; /* Take full width */
        max-width: 700px; /* Allow slightly wider content when alone */
        margin: 0 auto; /* Center the single element */
    }

     /* Ensure text is readable */
    .text-container {
        padding: 1rem; /* Add some padding inside text container */
    }

    /* Increase font size for text-only blocks */
    .scroll-block.only-text .text-container {
        font-size: 1.4em; /* 40% larger font size */
    }
  }

  @media (min-width: 1024px) {
      /* Adjust max-width for paired blocks on very large screens */
       .scroll-block:not(.only-media):not(.only-text) .media-container {
           max-width: 700px; /* Allow media to be a bit larger */
       }
       .scroll-block:not(.only-media):not(.only-text) .text-container {
           max-width: 400px; /* Allow text to be a bit larger */
       }

       /* Adjust max-width for single-element blocks on very large screens */
       .scroll-block.only-media .media-container,
       .scroll-block.only-text .text-container {
           max-width: 800px;
       }
  }
</style>
